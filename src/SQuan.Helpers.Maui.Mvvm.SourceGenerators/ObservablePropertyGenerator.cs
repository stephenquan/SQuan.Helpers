using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SQuan.Helpers.Maui.Mvvm.SourceGenerators;

/// <summary>
/// Generates observable property implementations for classes marked with the 
/// <c>[SQuan.Helpers.Maui.Mvvm.ObservableProperty]</c> attribute.
/// </summary>
/// <remarks>This source generator scans for properties in classes that are annotated with the 
/// <c>[SQuan.Helpers.Maui.Mvvm.ObservableProperty]</c> attribute and generates code to implement  observable property
/// functionality. The generated code includes property change notifications  and hooks for custom logic during property
/// changes.  The generator produces partial methods for handling property change events, allowing developers  to
/// customize behavior when a property's value is about to change or has just changed.</remarks>
[Generator]
public class ObservablePropertyGenerator : IIncrementalGenerator
{
	/// <summary>
	/// Initializes the incremental generator by registering syntax-based transformations and source outputs.
	/// </summary>
	/// <remarks>This method sets up the generator to process syntax nodes representing property declarations with
	/// specific attributes. It filters properties annotated with the <c>ObservablePropertyAttribute</c> and generates
	/// source code for observable properties.</remarks>
	/// <param name="context">The context for incremental generator initialization, providing access to syntax providers and source output
	/// registration.</param>
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		//System.Diagnostics.Debugger.Launch();
		var properties = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: static (node, _)
					=> node is PropertyDeclarationSyntax propertyDeclaration
						&& propertyDeclaration.AttributeLists.Count > 0
						&& propertyDeclaration.Modifiers.Count > 0
						&& propertyDeclaration.Modifiers.IndexOf(SyntaxKind.PartialKeyword) != -1,
				transform: static (ctx, _) =>
				{
					var propertySyntax = (PropertyDeclarationSyntax)ctx.Node;
					var propertySymbol = ctx.SemanticModel.GetDeclaredSymbol(propertySyntax) as IPropertySymbol;
					if (propertySymbol is null)
					{
						return null;
					}

					bool hasAttribute = false;
					foreach (var attr in propertySymbol.GetAttributes())
					{
						if (attr.AttributeClass?.Name == "SQuan.Helpers.Maui.Mvvm.ObservablePropertyAttribute" ||
							attr.AttributeClass?.ToDisplayString() == "SQuan.Helpers.Maui.Mvvm.ObservablePropertyAttribute")
						{
							hasAttribute = true;
							break;
						}
					}

					return hasAttribute ? propertySymbol : null;
				})
			.Where(static symbol => symbol is not null);

		context.RegisterSourceOutput(properties, (spc, propertySymbol) =>
		{
			var propertyAttributes = propertySymbol!.GetAttributes();
			var classSymbol = propertySymbol!.ContainingType;
			var className = classSymbol.Name;
			var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
			var propertyName = propertySymbol.Name;
			var typeName = propertySymbol.Type.ToDisplayString();
			var bareTypeName = typeName.Replace("?", "");
			PropertyDeclarationSyntax propertySyntax = (propertySymbol.DeclaringSyntaxReferences[0].GetSyntax() as PropertyDeclarationSyntax)!;
			var propertyModifiers = propertySyntax.Modifiers
				.Where(m => !m.IsKind(SyntaxKind.PartialKeyword))
				.Select(m => m.Text)
				.ToList();
			string access = propertyModifiers.Count > 0 ? string.Join(" ", propertyModifiers) : "public";

			string getModifiers = string.Empty;
			string setModifiers = string.Empty;
			if (propertySyntax.AccessorList is not null)
			{
				foreach (var accessor in propertySyntax.AccessorList.Accessors)
				{
					if (accessor.Kind() == SyntaxKind.GetAccessorDeclaration)
					{
						getModifiers = accessor.Modifiers.ToString();
					}
					else if (accessor.Kind() == SyntaxKind.SetAccessorDeclaration)
					{
						setModifiers = accessor.Modifiers.ToString();
					}
				}
			}

			string additionalChangingCommands = string.Empty;
			string additionalChangedCommands = string.Empty;

			foreach (var attr in propertyAttributes)
			{
				switch (attr.AttributeClass?.ToDisplayString())
				{
					case "SQuan.Helpers.Maui.Mvvm.NotifyPropertyChangedForAttribute":
						foreach (var str in attr.ConstructorArguments.ToStringList())
						{
							additionalChangedCommands +=
$$"""
				OnPropertyChanged("{{str}}");
""";
						}
						break;
					case "SQuan.Helpers.Maui.Mvvm.NotifyPropertyChangingForAttribute":
						foreach (var str in attr.ConstructorArguments.ToStringList())
						{
							additionalChangedCommands +=
$$"""
				OnPropertyChanging("{{str}}");
""";
						}
						break;

					default:
						continue;
				}
			}

			var source = $@"
using System.ComponentModel;

// <auto-generated/>
#pragma warning disable
#nullable enable

namespace {namespaceName};

partial class {className}
{{
	{access} partial {typeName} {propertyName}
	{{
		{getModifiers} get => field;
		{setModifiers} set
		{{
			if (!System.Collections.Generic.EqualityComparer<{typeName}>.Default.Equals(field, value))
			{{
				{typeName} oldValue = field;
				On{propertyName}Changing(value);
				On{propertyName}Changing(oldValue, value);
{additionalChangingCommands}
				field = value;
				On{propertyName}Changed(value);
				On{propertyName}Changed(oldValue, value);
				OnPropertyChanged(nameof({propertyName}));
{additionalChangedCommands}
			}}
		}}
	}}

	/// <summary>Executes the logic for when <see cref=""{propertyName}""/> is changing.</summary>
	/// <param name=""value"">The new property value being set.</param>
	/// <remarks>This method is invoked right before the value of <see cref=""{propertyName}""/> is changed.</remarks>
	partial void On{propertyName}Changing({typeName} value);

	/// <summary>Executes the logic for when <see cref=""{propertyName}""/> is changing.</summary>
	/// <param name=""oldValue"">The previous property value that is being replaced.</param>
	/// <param name=""newValue"">The new property value being set.</param>
	/// <remarks>This method is invoked right before the value of <see cref=""{propertyName}""/> is changed.</remarks>
	partial void On{propertyName}Changing({typeName} oldValue, {typeName} newValue);

	/// <summary>Executes the logic for when <see cref=""{propertyName}""/> just changed.</summary>
	/// <param name=""value"">The new property value that was set.</param>
	/// <remarks>This method is invoked right after the value of <see cref=""{propertyName}""/> is changed.</remarks>
	partial void On{propertyName}Changed({typeName} value);

	/// <summary>Executes the logic for when <see cref=""{propertyName}""/> just changed.</summary>
	/// <param name=""oldValue"">The previous property value that was replaced.</param>
	/// <param name=""newValue"">The new property value that was set.</param>
	/// <remarks>This method is invoked right after the value of <see cref=""{propertyName}""/> is changed.</remarks>
	partial void On{propertyName}Changed({typeName} oldValue, {typeName} newValue);
}}
";
			spc.AddSource($"{namespaceName}_{className}_{propertyName}_ObservableProperty.g.cs", SourceText.From(source, Encoding.UTF8));
		});
	}
}
